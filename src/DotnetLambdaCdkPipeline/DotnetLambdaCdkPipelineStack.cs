using System.Collections.Generic;
using Amazon.CDK;
using Amazon.CDK.AWS.CodeBuild;
using Amazon.CDK.AWS.CodeCommit;
using Amazon.CDK.AWS.IAM;
using Amazon.CDK.Pipelines;
using Constructs;

namespace DotnetLambdaCdkPipeline
{
    public class DotnetLambdaCdkPipelineStack : Stack
    {
        internal DotnetLambdaCdkPipelineStack(Construct scope, string id, IStackProps props = null) : base(scope, id, props)
        {
            var repository = Repository.FromRepositoryName(this, "repository", "dotnet-lambda-cdk-pipeline");

            // This construct creates a pipeline with 3 stages: Source, Build, and UpdatePipeline
            var pipeline = new CodePipeline(this, "pipeline", new CodePipelineProps
            {
                PipelineName = "LambdaPipeline",
                SelfMutation = true,

                // Synth represents a build step that produces the CDK Cloud Assembly.
                // The primary output of this step needs to be the cdk.out directory generated by the cdk synth command.
                Synth = new CodeBuildStep("Synth", new CodeBuildStepProps
                {
                    // The files downloaded from the repository will be placed in the working directory when the script is executed
                    Input = CodePipelineSource.CodeCommit(repository, "main"),

                    // Commands to run to generate CDK Cloud Assembly
                    Commands = new string[] { "npm install -g aws-cdk", "cdk synth" },

                    // Build environment configuration
                    BuildEnvironment = new BuildEnvironment
                    {
                        BuildImage = LinuxBuildImage.AMAZON_LINUX_2_4,
                        ComputeType = ComputeType.SMALL,

                        // Specify true to get a privileged container inside the build environment image
                        Privileged = true
                    }
                })
            });

            var devStage = pipeline.AddStage(new DotnetLambdaCdkPipelineStage(this, "Development"));

            // Add this code for test reports
            var reportGroup = new ReportGroup(this, "TestReports", new ReportGroupProps
            {
                ReportGroupName = "TestReports"
            });

            // Policy statements for CodeBuild Project Role
            var policyProps = new PolicyStatementProps()
            {
                Actions = new string[] {
                    "codebuild:CreateReportGroup",
                    "codebuild:CreateReport",
                    "codebuild:UpdateReport",
                    "codebuild:BatchPutTestCases"
                },
                Effect = Effect.ALLOW,
                Resources = new string[] { reportGroup.ReportGroupArn }
            };

            // PartialBuildSpec in AWS CDK for C# can be created using Dictionary
            var reports = new Dictionary<string, object>()
            {
                {
                    "reports", new Dictionary<string, object>()
                    {
                        {
                            reportGroup.ReportGroupArn, new Dictionary<string,object>()
                            {
                                { "file-format", "VisualStudioTrx" },
                                { "files", "**/*" },
                                { "base-directory", "./testresults" }
                            }
                        }
                    }
                }
            };

            devStage.AddPre(new Step[]
            {
                new CodeBuildStep("Unit Test", new CodeBuildStepProps
                {
                    Commands= new string[]
                    {
                        "dotnet test -c Release ./src/SampleLambda/test/SampleLambda.Tests/SampleLambda.Tests.csproj --logger trx --results-directory ./testresults",
                    },
                    PrimaryOutputDirectory = "./testresults",
                    PartialBuildSpec= BuildSpec.FromObject(reports),
                    RolePolicyStatements = new PolicyStatement[] { new PolicyStatement(policyProps) },
                    BuildEnvironment = new BuildEnvironment
                    {
                        BuildImage = LinuxBuildImage.AMAZON_LINUX_2_4,
                        ComputeType = ComputeType.MEDIUM
                    }
                })
            });

            var prodStage = pipeline.AddStage(new DotnetLambdaCdkPipelineStage(this, "Production"), new AddStageOpts
            {
                Pre = new[] { new ManualApprovalStep("PromoteToProd") }
            });
        }
    }
}
